import rutinas.*
import personas.*
import clubs.*

describe "Ejercicio" {

 //Punto 1: rutinas

	const correrEnLaPlaya = new Running(intensidad = 1.2)
	
	const maratonBA = new Maraton(intensidad = 1.5)

	const remarEnElDelta = new Remo()

	const remarEnCaminoRemeros = new RemoOlimpico()

	const calamardo = new PersonaSedentaria(peso = 60,tiempoEntreno = 5)
 	
	const bob =  new PersonaAtleta(peso = 40)

	const recreo = new Predio(rutinas = #{correrEnLaPlaya,maratonBA})
	const nautico = new Predio (rutinas = #{remarEnElDelta,remarEnCaminoRemeros})
	const clubBarrial = new Club( predios = #{recreo,nautico})


	test "correrEnLaPlaya : una actividad de running con intensisdad 1.2"{
		
		assert.equals(360,correrEnLaPlaya.caloriasQuemadasEn(5))
		assert.equals(10200,correrEnLaPlaya.caloriasQuemadasEn(90))
	}

	test "remarEnElDelta : una actividad de remo"{
		assert.equals(520,remarEnElDelta.caloriasQuemadasEn(5))
		assert.equals(9360,remarEnElDelta.caloriasQuemadasEn(90))
	}

	test"remarEnCaminoRemeros : una actividad de remo comptetitivo"{
		assert.equals(510,remarEnCaminoRemeros.caloriasQuemadasEn(5))
		assert.equals(12750,remarEnCaminoRemeros.caloriasQuemadasEn(90))
	}

	test "maratonBA : una actividad con intensidad 1.5"{
		
		assert.equals(900,maratonBA.caloriasQuemadasEn(5))
		assert.equals(25500,maratonBA.caloriasQuemadasEn(90))
	}

	//Punto 2: Personas
	//ATENCION: usar el metodo truncate(3) para truncar un numero a 3 decimales
	// Ej: 1.2345.truncate(3) -> devuelve 1.234 
	
	test "2.1.1 test sedentario running"{
		calamardo.realizarRutina(correrEnLaPlaya)
		assert.equals(59.948,calamardo.peso().truncate(3))
	} 
	
	test "2.1.2 test sedentario maraton" {
		calamardo.realizarRutina(maratonBA)
		assert.equals(59.871,calamardo.peso().truncate(3))
	} 

	test "2.1.3 test sedentario remo" {
		calamardo.realizarRutina(remarEnElDelta)
		assert.equals(59.925,calamardo.peso().truncate(3))
	} 

	test "2.1.3 test sedentario remo competicion" {
		calamardo.realizarRutina(remarEnCaminoRemeros)
		assert.equals(59.927,calamardo.peso().truncate(3))
	} 

	
	test "2.1.5 test sedentario no puede practicar" {
		calamardo.peso(40)
		assert.throwsException({calamardo.realizarRutina(correrEnLaPlaya)})
		assert.equals(40,calamardo.peso())		
	} 
	
	test "2.2.1 test atleta running" {
		bob.realizarRutina(correrEnLaPlaya)
		assert.equals(39.725,bob.peso().truncate(3))
	 }

	test "2.2.2 test atleta maraton" {
		bob.realizarRutina(maratonBA)
		assert.equals(37.812,bob.peso().truncate(3))		
	}

	test "2.2.3 test atleta remo" {
		assert.throwsException({bob.realizarRutina(remarEnElDelta)})
		assert.equals(40,bob.peso())		
	}

	test "2.2.3 test atleta remo de competici√≥n" {
		bob.realizarRutina(remarEnCaminoRemeros)
		assert.equals(39.406,bob.peso().truncate(3))
	}
	 

	//Punto 3: clubes
	
	test "calorias de bob al realizar actividades en predio"{
		assert.equals(recreo,clubBarrial.mejorPredioPara(bob))
		assert.equals(35700,recreo.caloriasAlRealizarTodasLasActividades(bob))
		assert.equals(22110,nautico.caloriasAlRealizarTodasLasActividades(bob))
	}

	test "calorias de calamardo al realizar actividades en predios"{
		assert.equals(recreo,clubBarrial.mejorPredioPara(calamardo))
		assert.equals(1260,recreo.caloriasAlRealizarTodasLasActividades(calamardo))
		assert.equals(1030,nautico.caloriasAlRealizarTodasLasActividades(calamardo))
	}

	test "predios tranquis para bob"{
		assert.equals(#{},clubBarrial.prediosTranquisPara(bob))
	}

	test "predios tranquis para calamardo"{
		assert.equals(#{},clubBarrial.prediosTranquisPara(calamardo))
	}
}